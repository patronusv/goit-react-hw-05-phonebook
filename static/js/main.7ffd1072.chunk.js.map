{"version":3,"sources":["components/AppStyled.js","components/contactForm/ContactFormStyled.js","components/contactForm/ContactForm.js","components/contactList/contactListItem/ContactListItemStyled.js","components/contactList/contactListItem/ContactListItem.js","components/contactList/ContactListStyled.js","components/contactList/ContactList.js","components/filter/FilterStyled.js","components/filter/Filter.js","components/alert/AlertStyled.js","components/alert/Alert.js","components/App.js","index.js"],"names":["AppWrapper","styled","div","FormWrapper","initialState","name","number","ContactForm","onAddItem","useState","state","setState","handleInputChange","e","target","value","prevState","onSubmit","preventDefault","user","id","uuidv4","className","type","onChange","ContactLi","li","ContactListItem","item","onBtnClick","classname","onClick","data-id","ContactListWrapper","ContactList","contacts","filter","TransitionGroup","component","toLowerCase","includes","map","CSSTransition","timeout","classNames","propTypes","PropTypes","array","string","func","isRequired","FilterWrapper","Filter","AlertBox","Alert","message","App","alertMessage","setAlertMessage","showAlert","setShowAlert","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","showAlertMessage","setTimeout","in","unmountOnExit","appear","some","element","length","dataset","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ffd1072.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nconst AppWrapper = styled.div`\r\n  padding: 20px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  border: 1px solid navy;\r\n  border-radius: 10px;\r\n  width: 500px;\r\n  margin: 0 auto;\r\n  background-color: #efefef;\r\n  box-shadow: 7px 5px 7px 5px rgba(140, 140, 140, 0.75);\r\n  .page-title {\r\n    margin-bottom: 20px;\r\n  }\r\n  .contacts-title {\r\n    margin-bottom: 10px;\r\n    position: relative;\r\n    z-index: 1;\r\n\r\n    overflow: hidden;\r\n  }\r\n  .my-title-appear {\r\n    opacity: 0;\r\n    transform: translateX(-100%);\r\n  }\r\n\r\n  .my-title-appear-active {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n    transition: all 500ms;\r\n  }\r\n  .my-title-exit {\r\n    opacity: 1;\r\n  }\r\n  .my-title-exit-active {\r\n    opacity: 0;\r\n    transition: opacity 500ms;\r\n  }\r\n  .my-filter-enter {\r\n    opacity: 0;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  .my-filter-enter-active {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n    transition: all 250ms;\r\n  }\r\n  .my-filter-exit {\r\n    opacity: 1;\r\n  }\r\n  .my-filter-exit-active {\r\n    opacity: 0;\r\n    transition: opacity 250ms;\r\n  }\r\n  .my-alert-enter {\r\n    opacity: 0;\r\n    transform: translateX(100%);\r\n  }\r\n\r\n  .my-alert-enter-active {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n    transition: all 250ms;\r\n  }\r\n  .my-alert-exit {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n  }\r\n  .my-alert-exit-active {\r\n    opacity: 0;\r\n    transform: translateX(100%);\r\n    transition: all 250ms;\r\n  }\r\n`;\r\nexport default AppWrapper;\r\n","import styled from 'styled-components';\r\nconst FormWrapper = styled.div`\r\n  padding: 20px 0;\r\n  width: 100%;\r\n\r\n  /* margin: 0 auto; */\r\n  background-color: #efefef;\r\n  .form-label {\r\n    font-weight: 700;\r\n    display: block;\r\n    margin-bottom: 10px;\r\n  }\r\n  .form-input {\r\n    display: block;\r\n    width: 100%;\r\n  }\r\n  .form-button {\r\n    padding: 5px 15px;\r\n    border: 1px solid navy;\r\n    border-radius: 5px;\r\n    background-color: lightblue;\r\n    box-shadow: 1px 1px 7px 0px rgba(140, 140, 140, 0.75);\r\n  }\r\n  .form-button:hover,\r\n  .form-button:focus {\r\n    background-color: yellowgreen;\r\n  }\r\n`;\r\nexport default FormWrapper;\r\n","import React, { useState } from 'react';\r\n// import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport FormWrapper from './ContactFormStyled';\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n};\r\nconst ContactForm = ({ onAddItem }) => {\r\n  const [state, setState] = useState({ ...initialState });\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n    setState(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const user = { id: uuidv4(), name: state.name, number: state.number };\r\n\r\n    onAddItem(user);\r\n    setState({ ...initialState });\r\n  };\r\n  const { name, number } = state;\r\n  return (\r\n    <FormWrapper>\r\n      <form onSubmit={handleSubmit}>\r\n        <label className=\"form-label\">\r\n          Name\r\n          <input className=\"form-input\" type=\"text\" name=\"name\" value={name} onChange={handleInputChange} />\r\n        </label>\r\n        <label className=\"form-label\">\r\n          Number\r\n          <input className=\"form-input\" type=\"text\" name=\"number\" value={number} onChange={handleInputChange} />\r\n        </label>\r\n        <button className=\"form-button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  onAddItem: PropTypes.func.isRequired,\r\n};\r\n\r\n// export default class ContactForm extends Component {\r\n// state = {\r\n//   name: '',\r\n//   number: '',\r\n// };\r\n// handleInputChange = e => {\r\n//   const { name, value } = e.target;\r\n//   this.setState({ [name]: value });\r\n// };\r\n// handleSubmit = e => {\r\n//   e.preventDefault();\r\n//   const user = { id: uuidv4(), name: this.state.name, number: this.state.number };\r\n\r\n//   this.props.onAddItem(user);\r\n//   this.resetState();\r\n// };\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n//     return (\r\n// <FormWrapper>\r\n//   <form onSubmit={this.handleSubmit}>\r\n//     <label className=\"form-label\">\r\n//       Name\r\n//       <input className=\"form-input\" type=\"text\" name=\"name\" value={name} onChange={this.handleInputChange} />\r\n//     </label>\r\n//     <label className=\"form-label\">\r\n//       Number\r\n//       <input className=\"form-input\" type=\"text\" name=\"number\" value={number} onChange={this.handleInputChange} />\r\n//     </label>\r\n//     <button className=\"form-button\" type=\"submit\">\r\n//       Add contact\r\n//     </button>\r\n//   </form>\r\n// </FormWrapper>\r\n//     );\r\n//   }\r\n// }\r\n// ContactForm.propTypes = {\r\n//   onAddItem: PropTypes.func.isRequired,\r\n// };\r\n","import styled from 'styled-components';\r\nconst ContactLi = styled.li`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 5px 15px;\r\n  border: 1px solid navy;\r\n  border-radius: 5px;\r\n  box-shadow: 1px 1px 7px 0px rgba(140, 140, 140, 0.75);\r\n  .contact-list-name {\r\n    font-weight: 700;\r\n    margin-right: 5px;\r\n  }\r\n  .contact-list-number {\r\n    margin-right: 10px;\r\n  }\r\n  .contact-list-button {\r\n    padding: 5px 15px;\r\n    border: 1px solid navy;\r\n    border-radius: 5px;\r\n    background-color: lightblue;\r\n    box-shadow: 1px 1px 7px 0px rgba(140, 140, 140, 0.75);\r\n  }\r\n  .contact-list-button:hover,\r\n  .contact-list-button:focus {\r\n    background-color: yellowgreen;\r\n  }\r\n`;\r\nexport default ContactLi;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactLi from './ContactListItemStyled';\r\nconst ContactListItem = ({ item, onBtnClick }) => {\r\n  return (\r\n    <ContactLi classname=\"contact-list-item\" key={item.id}>\r\n      <span className=\"contact-list-name\">{item.name}: </span>\r\n      <span className=\"contact-list-number\">{item.number}</span>\r\n      <button className=\"contact-list-button\" type=\"button\" onClick={onBtnClick} data-id={item.id}>\r\n        Delete contact\r\n      </button>\r\n    </ContactLi>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\nContactListItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  onBtnClick: PropTypes.func.isRequired,\r\n};\r\n","import styled from 'styled-components';\r\nconst ContactListWrapper = styled.div`\r\n  padding: 10px 0;\r\n  li:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  .my-list-item-enter {\r\n    opacity: 0;\r\n    transform: translateX(-100%);\r\n  }\r\n\r\n  .my-list-item-enter-active {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n    transition: all 250ms;\r\n  }\r\n  .my-list-item-exit {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n  }\r\n  .my-list-item-exit-active {\r\n    opacity: 0;\r\n    transform: translateX(-100%);\r\n    transition: all 250ms;\r\n  }\r\n`;\r\nexport default ContactListWrapper;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactListItem from './contactListItem/ContactListItem';\r\nimport ContactListWrapper from './ContactListStyled';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst ContactList = ({ contacts, filter, onBtnClick }) => {\r\n  return (\r\n    <ContactListWrapper>\r\n      <TransitionGroup component=\"ul\" className=\"list\">\r\n        {contacts\r\n          .filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\r\n          .map(item => (\r\n            <CSSTransition key={item.id} timeout={250} classNames=\"my-list-item\">\r\n              <ContactListItem item={item} onBtnClick={onBtnClick} />\r\n            </CSSTransition>\r\n          ))}\r\n      </TransitionGroup>\r\n    </ContactListWrapper>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\nContactListItem.propTypes = {\r\n  contacts: PropTypes.array,\r\n  filter: PropTypes.string,\r\n  onBtnClick: PropTypes.func.isRequired,\r\n};\r\n","import styled from 'styled-components';\r\nconst FilterWrapper = styled.div`\r\n  width: 100%;\r\n  padding: 20px 0;\r\n  .filter-label {\r\n    font-weight: 700;\r\n    display: block;\r\n  }\r\n  .filter-input {\r\n    display: block;\r\n    width: 100%;\r\n  }\r\n`;\r\nexport default FilterWrapper;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FilterWrapper from './FilterStyled';\r\nconst Filter = ({ onChange, filter }) => {\r\n  return (\r\n    <FilterWrapper>\r\n      <label className=\"filter-label\">\r\n        Search by name\r\n        <input className=\"filter-input\" type=\"text\" name=\"filter\" value={filter} onChange={onChange} />\r\n      </label>\r\n    </FilterWrapper>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string,\r\n};\r\n","import styled from 'styled-components';\r\nconst AlertBox = styled.div`\r\n  padding: 15px;\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 40px;\r\n  background-color: tomato;\r\n  max-width: 450px;\r\n\r\n  border-radius: 5px;\r\n  .alertText {\r\n    font-size: 20px;\r\n  }\r\n`;\r\nexport default AlertBox;\r\n","import PropTypes from 'prop-types';\r\nimport AlertBox from './AlertStyled';\r\nconst Alert = ({ message }) => {\r\n  return (\r\n    <AlertBox>\r\n      <p className=\"alertText\">{message}</p>\r\n    </AlertBox>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n\r\nAlert.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport AppWrapper from './AppStyled';\nimport { CSSTransition } from 'react-transition-group';\n\nimport ContactForm from './contactForm/ContactForm';\nimport ContactList from './contactList/ContactList';\nimport Filter from './filter/Filter';\nimport Alert from './alert/Alert';\nconst initialState = {\n  contacts: [],\n  filter: '',\n};\nconst App = () => {\n  const [state, setState] = useState({ ...initialState });\n  const [alertMessage, setAlertMessage] = useState('');\n  const [showAlert, setShowAlert] = useState(false);\n  useEffect(() => {\n    const contacts = localStorage.getItem('contacts');\n    if (contacts) {\n      setState({ contacts: JSON.parse(contacts) });\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(state.contacts));\n    setState(prevState => ({ ...prevState, filter: state.filter }));\n  }, [state.filter, state.contacts]);\n  const showAlertMessage = message => {\n    setAlertMessage(message);\n    setShowAlert(true);\n    setTimeout(() => {\n      setShowAlert(false);\n    }, 3000);\n    setTimeout(() => {\n      setAlertMessage('');\n    }, 3250);\n  };\n  const addPhonebookItem = item => {\n    const { contacts } = state;\n    if (contacts.some(element => element.name === item.name)) {\n      showAlertMessage(`${item.name} is already in contacts`);\n      return;\n    }\n    if (!item.name.length) {\n      showAlertMessage('Please enter a name');\n      return;\n    }\n    if (!item.number.length) {\n      showAlertMessage('Please enter a number');\n      return;\n    }\n    setState(prevState => ({ ...prevState, contacts: [...prevState.contacts, item] }));\n  };\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setState(prevState => ({ ...prevState, [name]: value }));\n  };\n  const handleDeleteContact = e => {\n    const id = e.target.dataset.id;\n    setState(prevState => ({ ...prevState, contacts: state.contacts.filter(item => item.id !== id) }));\n    if (state.contacts.filter(item => item.name.toLowerCase().includes(state.filter.toLowerCase())).length < 2) {\n      setState(prevState => ({ ...prevState, filter: '' }));\n    }\n  };\n  const { contacts, filter } = state;\n  return (\n    <AppWrapper>\n      <CSSTransition in={showAlert} timeout={250} classNames=\"my-alert\" unmountOnExit>\n        <Alert message={alertMessage} />\n      </CSSTransition>\n      <CSSTransition in={true} appear={true} timeout={500} classNames=\"my-title\" unmountOnExit>\n        <h1 className=\"page-title\">Phonebook</h1>\n      </CSSTransition>\n\n      <ContactForm onAddItem={addPhonebookItem} />\n\n      <h2 className=\"contacts-title\">Contacts</h2>\n      <CSSTransition in={state.contacts.length > 1} timeout={250} classNames=\"my-filter\" unmountOnExit>\n        <Filter onChange={handleInputChange} filter={filter} />\n      </CSSTransition>\n\n      <ContactList contacts={contacts} filter={filter} onBtnClick={handleDeleteContact} />\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}